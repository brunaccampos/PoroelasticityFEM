function [coords, conn] = LoadMesh(meshfile, nsd, config_dir)
%LOADMESH Load mesh data from a mesh file generated by GMSH
%   x = LOADMESH(meshfile, nsd, config_dir) is a matrix containing the 
%   spatial coordinates of the nodes (size nn x nsd in which nn is the 
%   number of nodes in the mesh and nsd is the number of spatial dimensions).
%   The mesh is defined in the file exported from GMSH (meshfile), 
%   located in the directory config_dir.  
% 
%   [x, conn] = LOADMESH(meshfile, nsd, config_dir) also 
%   returns the element connectivity matrix (size ne x nne in which  
%   ne is the number of elements in the mesh and nne is the number of 
%   nodes per element).
% 
%   --------------------------------------------------------------------
%   Input
%   --------------------------------------------------------------------
%   meshfile:       Name of the mesh file exported from GMSH
%   nsd:            Number of spatial dimensions
%   config_dir:     Directory where mesh file is stored

% Acknowledgements: Matin Parchei Esfahani

filename = fullfile(config_dir, meshfile);
fileID = fopen(filename,'r');

s = textscan(fileID, '%s', 'delimiter', '\n');

% start of nodes section
n_str = find(strcmp(s{1}, '$Nodes'), 1, 'first');       
% start of elements section
e_str = find(strcmp(s{1}, '$Elements'), 1, 'first');    

% number of nodes
nnode = str2double( s{1}(n_str+1) );                   
% number of elements
nelem = str2double( s{1}(e_str+1) );                    

coords = zeros(nnode, nsd);

for i = 1:nnode
    temp = s{1}(n_str+1+i);
    temp = sscanf(temp{1}(1,:), '%f');
    % nodal coordinates
    coords(i,:) = temp(2:nsd+1)';                        
end

conn = [];

for i = 1:nelem
    temp = s{1}(e_str+1+i);
    temp = sscanf(temp{1}(1,:), '%d');
    % equivalent type number in GMSH
    elmtyp = temp(2);                                  

    switch elmtyp
        case 5          % B8
            nne = 8;
            if nsd == 3
                edg = 0;
            else
                edg = 1;
            end
        case 1          % L2
            nne = 2;    % number of nodes per element
            edg = 1;
        case 8          % L3
            nne = 3;    % number of nodes per element
            edg = 1;
        case 3          % Q4
            nne = 4;    % number of nodes per element
            if nsd == 2
                edg = 0;
            else
                edg = 1;
            end
        case 10         % Q9
            nne = 9;    % number of nodes per element
            if nsd == 2
                edg = 0;
            else
                edg = 1;
            end
        case 15         % single node element
            nne = 1;    % number of nodes per element
            edg = 1;    
        case 12         % B27
            nne = 27;   % number of nodes per element
            if nsd == 3
                edg = 0;
            else
                edg = 1;
            end
        case 2          % T3 element
            nne = 3;
            if nsd == 2
                edg = 0;
            else
                edg = 1;
            end
        case 9          % T6 element
            nne = 6;    
            if nsd == 2
                edg = 0;
            else
                edg = 1;
            end
    end
    
    if ~edg
        conn = [conn; temp(end-nne+1:end)'];
    end
    
end

clear s
fclose(fileID);

end